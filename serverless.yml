service: staircase-test-task

plugins:
  - serverless-python-requirements
  - serverless-step-functions

package:
  exclude:
    - node_modules/**
    - .idea/**
    - venv/**
    - package.json
    - package-lock.json
    - requirements.txt
    - .coverage
    - tests.py
    - htmlcov/**
    - __pycache__/**

custom:
  stage: dev
  blobsBucketName: blobs-bucket-${self:custom.stage}
  blobsTableName: blobs-table-${self:custom.stage}
  presignedUrlTTL: 30
  uploadingWaitingTime: 40
  maxLabels: 10
  minConfidence: 50
  callbackTimeout: 10

provider:
  name: aws
  runtime: python3.9
  stage: ${self:custom.stage}
  region: us-east-1
  memorySize: 128
  httpApi:
    cors: true
  environment:
    blobsBucketName: ${self:custom.blobsBucketName}
    blobsTableName: ${self:custom.blobsTableName}
    presignedUrlTTL: ${self:custom.presignedUrlTTL}
    uploadingWaitingTime: ${self:custom.uploadingWaitingTime}
    uploadingStepFunctionArn: ${self:resources.Outputs.UploadingStepFunction.Value}
    recognitionStepFunctionArn: ${self:resources.Outputs.RecognitionStepFunction.Value}
    maxLabels: ${self:custom.maxLabels}
    minConfidence: ${self:custom.minConfidence}
    callbackTimeout: ${self:custom.callbackTimeout}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
      Resource: arn:aws:s3:::${self:custom.blobsBucketName}/*
    - Effect: Allow
      Action:
        - "rekognition:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - { "Fn::GetAtt": ["BlobsTable", "Arn"] }
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource:
        - "*"

functions:
  initializeUploadListening:
    handler: app.handler.initialize_upload_listening_handler
    httpApi:
      payload: "2.0"
    events:
      - httpApi:
          path: /blobs
          method: POST
  checkUploading:
    handler: app.handler.check_uploading_handler
  imageHasBeenUploaded:
    handler: app.handler.image_has_been_uploaded_handler
    events:
      - s3:
          bucket: ${self:custom.blobsBucketName}
          event: s3:ObjectCreated:*
  getLabels:
    handler: app.handler.get_labels_handler
  transformLabels:
    handler: app.handler.transform_labels_handler
  saveLabels:
    handler: app.handler.save_labels_handler
  invokeCallback:
    handler: app.handler.invoke_callback_handler
  unexpectedErrorFallback:
    handler: app.handler.unexpected_error_fallback_handler
  getRecognitionResult:
    handler: app.handler.get_recognition_result_handler
    httpApi:
      payload: "2.0"
    events:
      - httpApi:
          path: /blobs/{blob_id}
          method: GET

stepFunctions:
  stateMachines:
    uploadingStepFunction:
      name: UploadingStepFunction
      definition:
        Comment: "Step Function that observes blob uploading."
        StartAt: Wait
        States:
          Wait:
            Type: Wait
            Seconds: ${self:custom.uploadingWaitingTime}
            Next: CheckUploading
          CheckUploading:
            Type: Task
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:custom.stage}-checkUploading
            End: true
    recognitionStepFunction:
      name: RecognitionStepFunction
      definition:
        Comment: "Step Function that performs recognition process."
        StartAt: RecognitionFlow
        States:
          RecognitionFlow:
            Type: Parallel
            Branches:
              - StartAt: GetLabels
                States:
                  GetLabels:
                    Type: Task
                    Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:custom.stage}-getLabels
                    Next: TransformLabels
                  TransformLabels:
                    Type: Task
                    Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:custom.stage}-transformLabels
                    Next: SaveLabels
                  SaveLabels:
                    Type: Task
                    Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:custom.stage}-saveLabels
                    Next: InvokeCallback
                  InvokeCallback:
                    Type: Task
                    Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:custom.stage}-invokeCallback
                    End: true
            Catch:
              - ErrorEquals: ["RecognitionStepHasBeenFailed"]
                Next: RecognitionPredefinedErrorFallback
              - ErrorEquals: ["States.ALL"]
                Next: UnexpectedErrorFallback
            End: true
          RecognitionPredefinedErrorFallback:
            Type: Pass
            End: true
          UnexpectedErrorFallback:
            Type: Task
            Parameters:
              ExecutionName.$: "$$.Execution.Name"
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${self:custom.stage}-unexpectedErrorFallback
            End: true

resources:
  Outputs:
    UploadingStepFunction:
      Value:
        Ref: UploadingStepFunction
    RecognitionStepFunction:
      Value:
        Ref: RecognitionStepFunction
  Resources:
    BlobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.blobsTableName}
        AttributeDefinitions:
          - AttributeName: blob_id
            AttributeType: S
        KeySchema:
          - AttributeName: blob_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
